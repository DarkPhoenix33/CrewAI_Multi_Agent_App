import os
from crewai import Agent, Task, Crew, Process

from dotenv import load_dotenv
from src.tools.powershell_executor import PowerShellExecutor
from langchain_openai import ChatOpenAI

load_dotenv()

os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

# The PowerShell tool will be initialized and passed from the calling application (e.g., Streamlit)

# Initialize the LLM for the manager agent
manager_llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0)

# Define Agents
iis_manager = Agent(
    role='IIS Manager',
    goal='Efficiently manage IIS web servers, application pools, and websites using precise PowerShell commands. Focus on using cmdlets like Get-WebAppPool, Get-Website, Get-WebApplication, and filtering/formatting output for clarity.',
    backstory='An expert in Microsoft IIS, capable of configuring, monitoring, and troubleshooting IIS environments with a focus on optimal PowerShell command usage and output interpretation.',
    verbose=True,
    allow_delegation=True,
    tools=[powershell_tool]
)

powershell_script_developer = Agent(
    role='PowerShell Script Developer',
    goal='Create highly efficient, robust, and reusable PowerShell script files, and manage file operations (read, write, append) ensuring correct formatting and saving of content as requested.',
    backstory='A seasoned PowerShell scripter with a deep understanding of Windows automation, best practices, and meticulous file handling for script creation and data storage.',
    verbose=True,
    allow_delegation=True,
    tools=[powershell_tool]
)

task_scheduler_agent = Agent(
    role='Task Scheduler Agent',
    goal='Automate tasks by creating, modifying, and managing scheduled tasks in Windows Task Scheduler with precise trigger settings and administrative privileges.',
    backstory='Proficient in Windows Task Scheduler, ensuring timely and secure execution of automated scripts and commands with the necessary permissions.',
    verbose=True,
    allow_delegation=True,
    tools=[powershell_tool]
)

windows_service_manager = Agent(
    role='Windows Service Manager',
    goal='Manage Windows services, including starting, stopping, restarting, and configuring them.',
    backstory='An expert in Windows service administration, ensuring system stability and application availability.',
    verbose=True,
    allow_delegation=True,
    tools=[powershell_tool]
)

log_event_manager = Agent(
    role='Log and Event Manager',
    goal='Monitor, analyze, and manage Windows event logs and application logs for troubleshooting and security.',
    backstory='A specialist in log analysis, capable of extracting critical information from Windows event logs and various application logs.',
    verbose=True,
    allow_delegation=True,
    tools=[powershell_tool]
)

# Define Tasks
# The manager agent will decide which agent gets which task based on the description.
# The tasks are now more general, allowing the manager to interpret and delegate.

main_task = Task(
    description=(
        "Analyze the user's request and break it down into sub-tasks if necessary. "
        "Delegate these sub-tasks to the appropriate specialized agents (IIS Manager, PowerShell Script Developer, "
        "Task Scheduler Agent, Windows Service Manager, Log and Event Manager). "
        "Ensure that all necessary information (e.g., script content, file paths, frequencies) is gathered "
        "from the user or generated by the agents as needed. If the request involves saving output to a file, "
        "ensure the file is created/updated correctly with the specified content and format. "
        "The final output should be the result of the executed command or a confirmation of the action taken. "
        "When executing PowerShell commands, ensure the output is formatted for readability and completeness, "
        "for example, by using `Format-Table -AutoSize` or `ConvertTo-Json` for structured data. "
        "If a task fails, the manager should attempt to retry or re-plan the approach. "
        "User Request: {user_request}"
    ),
    expected_output=(
        "The direct, raw output of the executed PowerShell command, or a clear confirmation of the action taken (e.g., 'Script created at C:\path\to\script.ps1', 'Task scheduled successfully'). "
        "If the request involves retrieving information, provide the information in a clear, readable format (e.g., table, JSON). "
        "If an error occurred, provide the error message."
    ),
    agent=None  # This task will be handled by the manager agent implicitly
)

# Main execution flow
if __name__ == "__main__":
    print("Welcome to the Multi-Agent PowerShell System!")
    # For testing purposes, a default request is set.
    # Uncomment the input() line below and remove this line for interactive use.
    user_request = input("Please enter your request (e.g., 'List all IIS app pools', 'Create a script to get running processes', 'Schedule a task to run C:\script.ps1 daily'): ")

    crew = Crew(
        agents=[
            iis_manager,
            powershell_script_developer,
            task_scheduler_agent,
            windows_service_manager,
            log_event_manager
        ],
        tasks=[main_task],
        verbose=True,
        process=Process.hierarchical,
        manager_llm=manager_llm
    )

    result = crew.kickoff(inputs={"user_request": user_request})

    print("\n\n########################")
    print("## Here is the final result ##")
    print("########################\n")
    print(result)